version: '3'
services:
  postgres-airflow:
    image: postgres
    environment:
      POSTGRES_PASSWORD: pssd
      POSTGRES_USER : airflowuser
      POSTGRES_DB : airflowdb
      AIRFLOW_SCHEMA: airflow
    expose:
      - 5432
    restart: always
    volumes:
      - ./scripts_postgres:/docker-entrypoint-initdb.d
      # - ./sample_data:/sample_data
    networks:
      - common_network

  postgres-dbt:
    image: postgres
    environment:
      POSTGRES_PASSWORD: pssd
      POSTGRES_USER : dbtuser
      POSTGRES_DB : dbtdb
      DBT_SCHEMA: dbt
      DBT_RAW_DATA_SCHEMA: dbt_raw_data
    expose:
      - 5432
    restart: always
    volumes:
      - ./sample_data:/sample_data
    networks:
      - common_network

  airflow:
    build: .
    restart: always
    environment: 
      DBT_PROFILES_DIR: /dbt
      AIRFLOW_HOME: /airflow
      PYTHON_DEPS: flask-session==0.3.2
      AIRFLOW__CORE__DAGS_FOLDER: /airflow/dags
      AIRFLOW__CORE__PARALLELISM: 4
      AIRFLOW__CORE__DAG_CONCURRENCY: 4
      AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 4
      # AIRFLOW__ADMIN__HIDE_SENSITIVE_VARIABLE_FIELDS: False
      # Postgres details need to match with the values defined in the postgres-airflow service
      POSTGRES_USER: airflowuser
      POSTGRES_PASSWORD: pssd
      POSTGRES_HOST: postgres-airflow
      POSTGRES_PORT: 5432
      POSTGRES_DB: airflowdb
      # postgres-dbt connection details. Required for the inital loading of seed data
      # Credentials need to match with service postgres-dbt
      DBT_POSTGRES_PASSWORD: pssd
      DBT_POSTGRES_USER : dbtuser
      DBT_POSTGRES_DB : dbtdb
      DBT_DBT_SCHEMA: dbt
      DBT_DBT_RAW_DATA_SCHEMA: dbt_raw_data
      DBT_POSTGRES_HOST: postgres-dbt
    depends_on:
      - postgres-airflow
      - postgres-dbt
    ports:
      - 8000:8080
    volumes:
      - ./dbt:/dbt
      - ./airflow:/airflow
    networks:
      - common_network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres-airflow
      - postgres-dbt
    networks:
      - common_network

  nodeapp:
    build: ./dapr/node
    ports:
      - "50002:50002"
    depends_on:
      - redis
      - placement
    networks:
      - common_network
  nodeapp-dapr:
    image: "daprio/daprd:edge"
    command: ["./daprd",
      "-app-id", "nodeapp",
      "-app-port", "3000",
      "-placement-host-address", "placement:50006",
      "-dapr-grpc-port", "50002",
      "-components-path", "/components"]
    volumes:
        - "./dapr/components/:/components"
    depends_on:
      - nodeapp
    network_mode: "service:nodeapp"
  ############################
  # Python app + Dapr sidecar
  ############################
  pythonapp:
    environment:
      PYTHONUNBUFFERED: 1
    build: ./dapr/python
    depends_on:
      - redis
      - placement
    networks:
      - common_network
  pythonapp-dapr:
    image: "daprio/daprd:edge"
    command: ["./daprd",
      "-app-id", "pythonapp",
      "-placement-host-address", "placement:50006",
      "-components-path", "/components"]
    volumes:
      - "./dapr/components/:/components"
    depends_on:
      - pythonapp
    network_mode: "service:pythonapp"
  ############################
  # Dapr placement service
  ############################
  placement:
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - common_network
  ############################
  # Redis state store
  ############################
  redis:
    image: "redis:alpine"
    ports:
      - "6380:6379"
    networks:
      - common_network
  ############################
  # Prometheus
  ############################
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - common_network

  ############################
  # Loki
  ############################
  # loki:
  #   image: grafana/loki:2.2.1
  #   ports:
  #     - "3100:3100"
  #   networks:
  #     - common_network
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./loki/local-config.yaml:/etc/loki/local-config.yaml

  ############################
  # OpenTelemetry Collector
  ############################
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "55680:55680"
    networks:
      - common_network

  ############################
  # Grafana
  ############################
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - common_network
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning

networks:
  common_network:
